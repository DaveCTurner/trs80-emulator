%package "dct25.trs80.syntax";
%class "TRS80Parser";

%import "dct25.trs80.syntaxTree.*";

%terminals INTEGERLITERAL, STRINGLITERAL, IDENTIFIER;
%terminals COLON, AT, COMMA, EQUALS, SEMICOLON, NOTEQUALS, OPENPARENTHESIS, CLOSEPARENTHESIS;
%terminals CLS, GOTO, END, PRINT, FOR, TO, NEXT, INPUT, IF, THEN, DIM, RND, LPRINT;
%terminals AND;
%right AND;

%goal program;

%typeof gotoStatement = "GotoStatement";
%typeof clearScreenStatement = "ClearScreenStatement";
%typeof statement = "Statement";
%typeof subsequentStatement = "Statement";
%typeof lineNumber = "LineNumber";
%typeof program = "Program";
%typeof programLine = "ProgramLine";
%typeof stringLiteral = "StringLiteral";
%typeof integerLiteral = "IntegerLiteral";
%typeof printStatement = "PrintStatement";
%typeof integerExpression = "IntegerExpression";
%typeof booleanExpression = "BooleanExpression";
%typeof identifier = "Identifier";
%typeof forStatement = "ForStatement";
%typeof nextStatement = "NextStatement";
%typeof inputStatement = "InputStatement";
%typeof ifStatement = "IfStatement";
%typeof dimStatement = "DimStatement";
%typeof arrayElement = "ArrayElement";
%typeof assignmentStatement = "AssignmentStatement";

program
	= programLine.lines+ {: return new Program(lines); :}
	;

programLine
	= lineNumber.n statementSequence.s {: return new ProgramLine(n, (Statement[]) s.value); :}
	;

statementSequence
	= statement.s0 subsequentStatement.s1* {: 
		Statement[] statements = new Statement[1 + s1.length];
		statements[0] = s0;
		for (int i = 0; i < s1.length; i++) {
			statements[i+1] = s1[i];
		}
		return new Symbol(statements);
	:}
	;

subsequentStatement
	= statementSeparator statement
	;

statementSeparator = COLON;

lineNumber
	= integerLiteral.n {: return new LineNumber(n); :}
	;

statement
	= clearScreenStatement.s {: return s; :}
	| gotoStatement.s {: return s; :}
	| endStatement.s {: return s; :}
	| printStatement
	| forStatement
	| nextStatement
	| inputStatement
	| ifStatement
	| dimStatement
	| assignmentStatement
	| error {: throw new java.lang.Error("statement error"); :}
	;

clearScreenStatement
	= CLS {: return new ClearScreenStatement(); :}
	;
	
gotoStatement
	= GOTO lineNumber.n {: return new GotoStatement(n); :}
	;

endStatement
	= END {: return new EndStatement(); :}
	;

integerLiteral
	= INTEGERLITERAL.i {: return new IntegerLiteral(i); :}
	;

stringLiteral
	= STRINGLITERAL.s {: return new StringLiteral(s); :}
	;

printStatement
	= PRINT AT integerLiteral.i COMMA stringLiteral.s {: return new PrintStatement(s, i); :}
	| PRINT stringLiteral.s {: return new PrintStatement(s, null); :}
	| LPRINT stringLiteral.s SEMICOLON {: return new PrintStatement(s, false); :}
	| LPRINT stringLiteral.s {: return new PrintStatement(s, true); :}
	;

identifier
	= IDENTIFIER.i {: return new Identifier(i); :}
	;

integerExpression
	= identifier.i {: return IntegerExpression.fromIdentifier(i); :}
	| integerLiteral.i {: return IntegerExpression.fromIntegerLiteral(i); :}
	| RND OPENPARENTHESIS integerExpression.i CLOSEPARENTHESIS {: return IntegerExpression.randomNumber(i); :}
	;

forStatement
	= FOR identifier.i EQUALS integerExpression.lb TO integerExpression.ub {: return new ForStatement(i, lb, ub); :}
	;

nextStatement
	= NEXT identifier.i {: return new NextStatement(i); :}
	| NEXT				{: return new NextStatement(); :}
	;
	
inputStatement
	= INPUT stringLiteral.s SEMICOLON identifier.i1 COMMA identifier.i2 {: return new InputStatement(s, i1, i2); :}
	;
		
ifStatement
	= IF booleanExpression.c THEN lineNumber.n {: return new IfStatement(c, n); :}
	;

booleanExpression
	= integerExpression.i1 NOTEQUALS integerExpression.i2 {: return new NotEqualsExpression(i1, i2); :}
	| integerExpression.i1 EQUALS integerExpression.i2 {: return new EqualsExpression(i1, i2); :}
	| booleanExpression.b1 AND booleanExpression.b2 {: return new Conjunction(b1, b2); :}
	;

dimStatement
	= DIM arrayElement.a1 COMMA arrayElement.a2 {: return new DimStatement(a1, a2); :}
	;

arrayElement
	= identifier.aid OPENPARENTHESIS integerExpression.i1 COMMA integerExpression.i2 CLOSEPARENTHESIS {: return new ArrayElement(aid, i1, i2); :}
	;

assignmentStatement
	= identifier.target EQUALS integerExpression.value {: return new AssignmentStatement(target, value); :}
	;
