%package "dct25.trs80.syntax";
%class "TRS80Parser";

%import "dct25.trs80.syntaxTree.*";

%terminals INTEGERLITERAL, STRINGLITERAL, IDENTIFIER;
%terminals COLON, AT, COMMA, EQUALS;
%terminals CLS, GOTO, END, PRINT, FOR, TO, NEXT;

%goal program;

%typeof gotoStatement = "GotoStatement";
%typeof clearScreenStatement = "ClearScreenStatement";
%typeof statement = "Statement";
%typeof subsequentStatement = "Statement";
%typeof lineNumber = "LineNumber";
%typeof program = "Program";
%typeof programLine = "ProgramLine";
%typeof stringLiteral = "StringLiteral";
%typeof integerLiteral = "IntegerLiteral";
%typeof printStatement = "PrintStatement";
%typeof integerExpression = "IntegerExpression";
%typeof identifier = "Identifier";
%typeof forStatement = "ForStatement";
%typeof nextStatement = "NextStatement";

program
	= programLine.lines+ {: return new Program(lines); :}
	;

programLine
	= lineNumber.n statementSequence.s {: return new ProgramLine(n, (Statement[]) s.value); :}
	;

statementSequence
	= statement.s0 subsequentStatement.s1* {: 
		Statement[] statements = new Statement[1 + s1.length];
		statements[0] = s0;
		for (int i = 0; i < s1.length; i++) {
			statements[i+1] = s1[i];
		}
		return new Symbol(statements);
	:}
	;

subsequentStatement
	= statementSeparator statement
	;

statementSeparator = COLON;

lineNumber
	= integerLiteral.n {: return new LineNumber(n); :}
	;

statement
	= clearScreenStatement.s {: return s; :}
	| gotoStatement.s {: return s; :}
	| endStatement.s {: return s; :}
	| printStatement
	| forStatement
	| nextStatement
	| error {: throw new java.lang.Error("statement error"); :}
	;

clearScreenStatement
	= CLS {: return new ClearScreenStatement(); :}
	;
	
gotoStatement
	= GOTO lineNumber.n {: return new GotoStatement(n); :}
	;

endStatement
	= END {: return new EndStatement(); :}
	;

integerLiteral
	= INTEGERLITERAL.i {: return new IntegerLiteral(i); :}
	;

stringLiteral
	= STRINGLITERAL.s {: return new StringLiteral(s); :}
	;

printStatement
	= PRINT AT integerLiteral.i COMMA stringLiteral.s {: return new PrintStatement(s, i); :}
	;

identifier
	= IDENTIFIER.i {: return new Identifier(i); :}
	;

integerExpression
	= identifier.i {: return IntegerExpression.fromIdentifier(i); :}
	| integerLiteral.i {: return IntegerExpression.fromIntegerLiteral(i); :}
	;

forStatement
	= FOR identifier.i EQUALS integerExpression.lb TO integerExpression.ub {: return new ForStatement(i, lb, ub); :}
	;

nextStatement
	= NEXT identifier.i {: return new NextStatement(i); :}
	| NEXT				{: return new NextStatement(); :}
	;